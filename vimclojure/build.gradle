buildscript {
    repositories {
        flatDir { dirs project(':').file('lib/build') }
    }
    dependencies {
        classpath "clojuresque:clojuresque:1.4.5"
        classpath "local-dotgradle:local-dotgradle:1.0.0"
    }
}

allprojects {
    repositories {
        flatDir { dirs project(':').file('lib/build') }
    }

    localDotGradle = project(':').file("local.gradle").absoluteFile
    apply plugin: 'local-dotgradle'
}

subprojects {
    apply plugin: 'java-base'

    group = 'vimclojure'
    version = '2.3.4-SNAPSHOT'

    defaultTasks 'build'
}

apply plugin: 'clojure'

defaultRepositories {
    clojarsRepo()
}

project(':server') {
    apply plugin: 'clojure'

    defaultRepositories {
        mavenCentral()
    }

    dependencies {
        compile 'org.clojure:clojure:[1.2,1.5)'
    }

    uploadArchives {
        clojarsDeploy()
    }

    compileClojure.dependsOn compileJava
}

project(':gradle') {
    apply plugin: 'groovy'
    apply plugin: 'clojure'

    dependencies {
        compile gradleApi()
        groovy localGroovy()
    }

    uploadArchives {
        clojarsDeploy()
    }
}


project(':client') {
    task nailgunClientZip(type: Zip) {
        archiveName = "vimclojure-nailgun-client-" + project.version + ".zip"
        into("vimclojure-nailgun-client") {
            from('.') {
                include "ngclient/**/*"
                include "Makefile"
                include "ng.exe"
            }
        }
    }
}

project(':vim') {
    task vimZip(type: Zip) {
        archiveName = "vimclojure-" + project.version + ".zip"
        from('.') {
            include 'autoload/**/*'
            include 'bin/**/*'
            exclude 'bin/kickoff.sh'
            include 'doc/**/*'
            include 'ftdetect/**/*'
            include 'ftplugin/**/*'
            include 'indent/**/*'
            include 'plugin/**/*'
            include 'syntax/**/*'
        }
        from('..') {
            include 'LICENSE.txt'
            include 'README.markdown'
        }
    }

    // Install the Vim part of the plugin
    def installFiles = { File directory, String pattern, File destination ->
        destination.mkdirs()
        ant.copy(todir: destination) {
            fileset dir: directory, includes: pattern
        }
    }

    task installVim << {
        File installDir

        if (project.hasProperty('vimdir')) {
            installDir = new File(project.vimdir)
        } else if (System.getProperty('os.name').toLowerCase().startsWith("win")) {
            installDir = new File(System.getProperty('user.home') + "/vimfiles")
        } else {
            installDir = new File(System.getProperty('user.home') + "/.vim")
        }

        // The Vim files:
        [ 'autoload', 'indent', 'syntax', 'ftdetect', 'ftplugin', 'plugin' ].each {
            File subDir = new File(installDir, it)
            installFiles project.file(it), '**/*.vim', subDir
        }

        // The Docs and other text files:
        [ 'doc', 'ftplugin/clojure' ].each {
            File subDir = new File(installDir, it)
            installFiles project.file(it), '**/*.txt', subDir
        }
    }
}

task genCompletions(type: clojuresque.ClojureExec) {
    classpath = project.files(
        project(':server').sourceSets.main.clojure.srcDirs,
        project(':server').sourceSets.main.output.classesDir,
        project(':server').sourceSets.main.compileClasspath
    )
    main = "vimclojure.gencompletions/main"
    args = [
        "clojure.core",
        "clojure.data",
        "clojure.inspector",
        "clojure.java.browse",
        "clojure.java.browse-ui",
        "clojure.java.io",
        "clojure.java.javadoc",
        "clojure.java.shell",
        "clojure.main",
        "clojure.pprint",
        "clojure.repl",
        "clojure.set",
        "clojure.stacktrace",
        "clojure.string",
        "clojure.template",
        "clojure.test",
        "clojure.test.tap",
        "clojure.test.junit",
        "clojure.walk",
        "clojure.xml",
        "clojure.zip"
    ]
}

task runNailgun(type: JavaExec) {
    dependsOn project(':server').classes
    dependsOn project(':server').processResources
    classpath = project.files(
        project(':server').sourceSets.main.clojure.srcDirs,
        project(':server').sourceSets.main.output.classesDir,
        project(':server').sourceSets.main.output.resourcesDir,
        project(':server').sourceSets.main.compileClasspath
    )
    main = 'vimclojure.nailgun.NGServer'
    args = [ '127.0.0.1' ]
}
